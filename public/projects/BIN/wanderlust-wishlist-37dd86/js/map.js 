// js/map.js - Optional Map Integration Placeholder

// Note: This file requires a mapping library (e.g., Leaflet, Mapbox GL JS)
// and potentially API keys. Include the library's CSS/JS in index.html if used.

let mapInstance = null; // Holds the map object
let markers = []; // Holds the marker objects

function initMap() {
    const mapContainer = document.getElementById('map-container');
    if (!mapContainer) {
        console.warn("Map container element ('map-container') not found. Map feature disabled.");
        return;
    }

    // --- Map Library Specific Initialization ---
    // Example using Leaflet (ensure Leaflet CSS/JS are included in index.html)
    /*
    try {
        mapInstance = L.map(mapContainer).setView([20, 0], 2); // Default view

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(mapInstance);

        console.log("Map initialized successfully.");
        updateMapMarkers(); // Initial marker load

    } catch (error) {
        console.error("Error initializing map (Leaflet library might be missing or failed):", error);
        mapContainer.innerHTML = '<p class="text-center text-red-500 p-4">Could not load map.</p>';
    }
    */

    // --- Placeholder if no library is used ---
     console.log("Map initialization skipped (optional feature). Implement using a library like Leaflet or Mapbox GL JS.");
     // mapContainer.innerHTML = '<p class="text-center text-gray-500 p-4">Map integration not implemented.</p>';

}

function clearMapMarkers() {
    if (!mapInstance) return;

    markers.forEach(marker => {
        // --- Map Library Specific Removal ---
        // Example using Leaflet:
        // marker.remove();
    });
    markers = []; // Clear the array
     console.log("Map markers cleared (placeholder).");
}

function addMarkerToMap(destination) {
    if (!mapInstance) return;
    if (!destination.latitude || !destination.longitude) {
        // console.warn(`Skipping marker for ${destination.name}: Missing coordinates.`);
        return; // Skip if no coordinates
    }

    // --- Map Library Specific Marker Creation ---
    // Example using Leaflet:
    /*
    try {
        const marker = L.marker([destination.latitude, destination.longitude]).addTo(mapInstance);
        marker.bindPopup(`<b>${destination.name}</b><br>${destination.description.substring(0, 50)}...`);
        markers.push(marker);
    } catch (error) {
        console.error(`Error adding marker for ${destination.name}:`, error);
    }
    */
     console.log(`Placeholder: Add marker for ${destination.name} at [${destination.latitude}, ${destination.longitude}]`);

}

function updateMapMarkers() {
    if (!mapInstance) {
        // console.log("Map not initialized, skipping marker update.");
        return;
    }

    clearMapMarkers();
    const destinations = getFilteredDestinations( // Use the filtering logic
         document.getElementById('search-input')?.value || '',
         document.getElementById('filter-category')?.value || 'all'
     ); // Or just getDestinations() if no filtering needed on map


    // Note: This requires destinations to have latitude/longitude properties.
    // Geocoding (converting location name to coordinates) would be needed
    // either when adding the destination or dynamically here (can be slow/costly).
    // For simplicity, this example assumes coordinates exist.

    destinations.forEach(dest => {
        // Simulate coordinates for demonstration if needed
        // if (!dest.latitude) dest.latitude = Math.random() * 180 - 90;
        // if (!dest.longitude) dest.longitude = Math.random() * 360 - 180;

        addMarkerToMap(dest);
    });

    console.log(`Map markers updated (placeholder). ${destinations.length} destinations processed.`);
    // Optionally adjust map bounds to fit markers
    // fitMapToBounds();
}

function fitMapToBounds() {
     if (!mapInstance || markers.length === 0) return;

     // --- Map Library Specific Bounds Calculation ---
     // Example using Leaflet:
     /*
     try {
         const group = new L.featureGroup(markers);
         mapInstance.fitBounds(group.getBounds().pad(0.1)); // Add padding
     } catch(error) {
         console.error("Error fitting map to bounds:", error);
     }
     */
     console.log("Placeholder: Fit map to bounds of markers.");
}


// --- Initialization Trigger ---
// Initialize map when the DOM is ready AND if the map section exists
// document.addEventListener('DOMContentLoaded', () => {
//     // Delay slightly to ensure other scripts (like destinations.js) might load data first
//     // Or better, call initMap() and updateMapMarkers() from script.js after data load/update
//     // initMap();
// });

// It's generally better to call `initMap` and `updateMapMarkers` from `script.js`
// after the initial destination load and whenever destinations are added, deleted, or filtered.
// Example calls from script.js:
// Inside loadAndRenderDestinations(): initMap(); updateMapMarkers(); // Init map once
// Inside filterAndRenderDestinations(): updateMapMarkers();
// Inside handleAddDestination() after saving: updateMapMarkers();
// Inside handleDeleteDestination() after deleting: updateMapMarkers();