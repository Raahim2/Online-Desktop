const STORAGE_KEY = 'sereneSoundscapes';

function getSavedSoundscapes() {
    const storedData = localStorage.getItem(STORAGE_KEY);
    if (!storedData) {
        return {};
    }
    try {
        const parsedData = JSON.parse(storedData);
        // Basic validation to ensure it's an object
        if (typeof parsedData === 'object' && parsedData !== null) {
            return parsedData;
        } else {
            console.error("Invalid data format found in localStorage for key:", STORAGE_KEY);
            // Optionally clear the invalid data: localStorage.removeItem(STORAGE_KEY);
            return {};
        }
    } catch (error) {
        console.error("Error parsing soundscapes from localStorage:", error);
        // Optionally clear the corrupted data: localStorage.removeItem(STORAGE_KEY);
        return {};
    }
}

function saveSoundscape(name, state) {
    if (!name || typeof name !== 'string' || name.trim() === "") {
        console.error("Invalid name provided for saving soundscape.");
        return false;
    }
    if (!state || typeof state !== 'object') {
         console.error("Invalid state object provided for saving soundscape.");
         return false;
    }

    try {
        const allSoundscapes = getSavedSoundscapes();
        allSoundscapes[name] = state;
        localStorage.setItem(STORAGE_KEY, JSON.stringify(allSoundscapes));
        return true;
    } catch (error) {
        console.error(`Error saving soundscape "${name}":`, error);
        // Handle potential storage quota errors
        if (error.name === 'QuotaExceededError') {
            alert('Could not save soundscape. Local storage quota exceeded.');
        }
        return false;
    }
}

function loadSoundscape(name) {
     if (!name || typeof name !== 'string' || name.trim() === "") {
        console.error("Invalid name provided for loading soundscape.");
        return null;
    }
    const allSoundscapes = getSavedSoundscapes();
    return allSoundscapes[name] || null; // Return the specific soundscape or null if not found
}

// Optional: Function to delete a saved soundscape
function deleteSoundscape(name) {
    if (!name || typeof name !== 'string' || name.trim() === "") {
        console.error("Invalid name provided for deleting soundscape.");
        return false;
    }
    try {
        const allSoundscapes = getSavedSoundscapes();
        if (allSoundscapes[name]) {
            delete allSoundscapes[name];
            localStorage.setItem(STORAGE_KEY, JSON.stringify(allSoundscapes));
            return true;
        }
        return false; // Soundscape didn't exist
    } catch (error) {
        console.error(`Error deleting soundscape "${name}":`, error);
        return false;
    }
}